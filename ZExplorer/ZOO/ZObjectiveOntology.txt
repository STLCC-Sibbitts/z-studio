Create an objective ontology
learning objective types
	skill
	concept

import stuff from mapping work
review MOUS stuff and Bloom for proper categorization
	also look at open source content standards

function comparison options
	- if doing copy and paste with formulas, compare using R#C#, rowcol version of formula because they
		should be equal
	- allow equivalent operand ordering
		simple parser to find operators that equivalent expresions a+b and b+a, a<b and b>a
			find operator and then locate operands in either direction
		* R1C1 style cell references
			# absolute cell reference 
				=R30C7 R#C# where # is absolute row and column on same sheet
				=Documentation!R3C2 on a different sheet
			# relative cell reference, have at least one set of brackets and do not use + for positive offset
				=R[-17]C[-4] value in brackets is relative row column
				=R[17]C - reference to another row in same column
				=RC[-4] - reference to another column in same row
		* parsing
			1) look for highest order binary operator that is or has a commutative equivalent and split
				actually, I may want to find lowest because everything else on either side will need to be 
				done first
			2) chart of equivalents
				+	+	- arithmetic operators are the same
				*	*
				=	=
				<	>	- relational use opposite
				<=	>=
				>	<
				>=	<=
				a) OPERATOR Precedence
					9) reference. : (colon), (single space), (comma)
					8) – Negation (as in –1)
					7) % Percent
					6) ^ Exponentiation
					5) * and / Multiplication and division
					4) + and – Addition and subtraction
					3) & Connects two strings of text (concatenation)
					0) comparison =, < >, <=, >=, <>
					parse inside out looking for operands of operators that have an alternate order equivalent

			3) recognize functions
				actually, just look for text that is adjacent to a left paren without an intervening operator
				function names must start with a letter, but can contain digits and periods

				once I have a function, look for commas
				or, if I do inside out, I only need to differentiate between a paren used for grouping, vs.
				a paren used for a function and treat the functionName( as the entire left paren

				commas inside an expression/function would be considered delimiters

				don't forget named ranges and other types of references

	- allow extra spaces
	- trap > vs. >= errors
	- trap missing parens, if expression is correct but missing parens, ...
	- trap missing absolute reference
	- allow, or not, " " as equivalent for "" in string literals, different than extra spaces

	bryan 315.267.6404